plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'application'
}

springBoot {
    mainClass = 'com.codeshare.platform.CodeSharingPlatformApplication' // <-- your backend entry point
}

group = 'com.codeshare'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

javafx {
    version = "17"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

// Main application configuration
application {
    mainClassName = 'com.codeshare.platform.cli.CodeShareCLI'
    applicationName = 'codeshare'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.openjfx:javafx-controls:17'
    implementation 'org.openjfx:javafx-fxml:17'
    implementation 'org.openjfx:javafx-web:17'
    implementation 'org.controlsfx:controlsfx:11.1.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.10.7'
    implementation 'org.openjfx:javafx-base:17'
    implementation 'org.openjfx:javafx-graphics:17'
    implementation 'org.openjfx:javafx-swing:17'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    compileOnly 'org.projectlombok:lombok:1.18.38' // <-- Use a specific version
    annotationProcessor 'org.projectlombok:lombok:1.18.38' // <-- Use a specific version
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Create a separate task for the CLI executable
task cliJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.codeshare.platform.cli.CodeShareCLI'
    }
    archiveBaseName = 'codeshare-cli'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to create CLI executable scripts
task createCliScripts(type: CreateStartScripts) {
    mainClassName = 'com.codeshare.platform.cli.CodeShareCLI'
    applicationName = 'codeshare'
    outputDir = new File(project.buildDir, 'cli-scripts')
    classpath = files(cliJar.archiveFile)
}

// Make sure cliJar is created before createCliScripts
createCliScripts.dependsOn cliJar

// Distribution tasks
distributions {
    main {
        distributionBaseName = 'codeshare'
    }
    
    cli {
        distributionBaseName = 'codeshare-cli'
        contents {
            from(cliJar)
            into('bin') {
                from(createCliScripts)
                fileMode = 0755
            }
        }
    }
}

// Create a task to build all
task buildAll {
    dependsOn build, cliJar, cliDistZip, cliDistTar
    description = 'Builds the main application and CLI components'
}

tasks.register('runCli', JavaExec) {
    group = 'application'
    description = 'Run the CodeShare CLI'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.codeshare.platform.cli.CodeShareCLI')
}

tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Run the Spring Boot Server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.codeshare.platform.CodeSharingPlatformApplication')
}